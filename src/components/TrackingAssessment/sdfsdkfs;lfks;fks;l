                            <div className="bg-white rounded-md shadow">
                              {/* <table className="w-full">
                                <thead>
                                  <tr>
                                    <td>
                                      <div className="flex justify-center p-2 font-semibold">
                                        KPIs
                                      </div>
                                    </td>
                                    <td>
                                      <div className="flex justify-center p-2 font-semibold">
                                        Weight
                                      </div>
                                    </td>
                                    <td>
                                      <div className="flex justify-center p-2 font-semibold">
                                        Metric Description
                                      </div>
                                    </td>
                                    <td>
                                      <div className="flex justify-center p-2 font-semibold">
                                        Achievements
                                      </div>
                                    </td>
                                    <td>
                                      <div className="flex justify-center p-2 font-semibold">
                                        Metric
                                      </div>
                                    </td>
                                    <td>
                                      <div className="flex justify-center p-2 font-semibold">
                                        Remarks
                                      </div>
                                    </td>
                                  </tr>
                                </thead>
                                <tbody>
                                  {grades
                                    .filter(
                                      (grade) =>
                                        grade.kpi_objective_id ===
                                        object.obj_objective_id
                                    )
                                    .map((grade, gradeIndex) => (
                                      <tr key={"kpi - " + grade.kpi_kpi_id + kCounter++}>
                                        <td>
                                          <div className="whitespace-break-spaces text-[.9rem] p-2">
                                            {grade.kpi_desc}
                                          </div>
                                        </td>
                                        <td>
                                          <div className="p-2 flex items-center justify-center">
                                            {grade.kpi_weight}%
                                          </div>
                                        </td>
                                        <td>
                                          <div className="p-2 flex text-[.8rem] justify-center items-start">
                                            <table>
                                              {metrics
                                                .filter(
                                                  (metric) =>
                                                    metric.metric_kpi_id ===
                                                    grade.kpi_kpi_id
                                                )
                                                .map((metric) => (
                                                  <tr>
                                                    <td valign="top" className="whitespace-nowrap">
                                                      <span>{metric.target_metrics_score}</span>
                                                      {" - "}
                                                    </td>
                                                    <td className="whitespace-break-spaces">
                                                      {
                                                        metric.target_metrics_desc
                                                      }
                                                    </td>
                                                  </tr>
                                                ))}
                                            </table>
                                          </div>
                                        </td>
                                        <td>
                                          <div className="whitespace-normal p-2">
                                            <textarea
                                              id="message"
                                              rows="4"
                                              className="bg-default block p-2 w-full text-sm text-gray-900 bg-gray-50 rounded-md resize-none"
                                              value={
                                                remarks[pillarIndex]?.[objectIndex]?.[gradeIndex] || (grade.remarks !== null ? grade.remarks : "")
                                              }
                                              defaultValue={grade.remarks || ""}
                                              onChange={(event) =>
                                                handleRemarksChange(
                                                  event,
                                                  pillarIndex,
                                                  objectIndex,
                                                  gradeIndex
                                                )
                                              }
                                            ></textarea>
                                          </div>
                                        </td>
                                        <td>
                                          <div className="p-2 flex items-center justify-center">
                                            <select
                                              className={classNames("rounded-md px-2 max-w-[6rem]",
                                                quarter == 2 ? (
                                                  selectedValues[pillarIndex]?.[objectIndex]?.[gradeIndex] === '1' || grade.results === 1 ? 'bg-un-red-light-1 text-un-red-dark' :
                                                    selectedValues[pillarIndex]?.[objectIndex]?.[gradeIndex] === '2' || grade.results === 2 ? 'bg-un-yellow-light text-un-yellow-dark' :
                                                      selectedValues[pillarIndex]?.[objectIndex]?.[gradeIndex] === '3' || grade.results === 3 ? 'bg-un-green-light text-un-green-dark' :
                                                        selectedValues[pillarIndex]?.[objectIndex]?.[gradeIndex] === '4' || grade.results === 4 ? 'bg-un-green-light text-un-green-dark' :
                                                          'bg-default') : "bg-default")}
                                              value={
                                                selectedValues[pillarIndex]?.[
                                                objectIndex
                                                ]?.[gradeIndex] ||
                                                (grade.results !== 0
                                                  ? grade.results
                                                  : "")
                                              } // value from state
                                              onChange={(event) =>
                                                handleSelectChange(
                                                  event,
                                                  pillarIndex,
                                                  objectIndex,
                                                  gradeIndex
                                                )
                                              } // event handler
                                            >
                                              <option value="0" disabled>
                                                ---
                                              </option>
                                              {metrics
                                                .filter(
                                                  (metric) =>
                                                    metric.metric_kpi_id ===
                                                    grade.kpi_kpi_id
                                                )
                                                .map((metric) => (
                                                  <option
                                                    key={metric.target_metrics_id}
                                                    value={metric.target_metrics_score}
                                                    className={quarter == 2 && (metric.target_metrics_score === 1 ? 'bg-un-red-light-1 text-un-red-dark' :
                                                      metric.target_metrics_score === 2 ? 'bg-un-yellow-light text-un-yellow-dark' :
                                                        metric.target_metrics_score === 3 || metric.target_metrics_score === 4 ? 'bg-un-green-light text-un-green-dark' :
                                                          '')}
                                                  >{metric.target_metrics_score}
                                                  </option>
                                                ))}
                                            </select>

                                          </div>
                                        </td>
                                        <td>
                                          <div className="whitespace-normal p-2">
                                            <textarea
                                              id="message"
                                              rows="4"
                                              className="bg-default block p-2 w-full text-sm text-gray-900 bg-gray-50 rounded-md resize-none"
                                              value={
                                                remarks[pillarIndex]?.[objectIndex]?.[gradeIndex] || (grade.remarks !== null ? grade.remarks : "")
                                              }
                                              defaultValue={grade.remarks || ""}
                                              onChange={(event) =>
                                                handleRemarksChange(
                                                  event,
                                                  pillarIndex,
                                                  objectIndex,
                                                  gradeIndex
                                                )
                                              }
                                            ></textarea>
                                          </div>
                                        </td>
                                      </tr>
                                    ))}
                                </tbody>
                              </table> */}
                            </div>



























                            <>
      <button
        className="flex flex-row items-center w-fit text-dark-gray text-[.9rem] bg-default-dark p-1 rounded-md"
        onClick={() => navigate(-1)}
      >
        <MdOutlineKeyboardArrowLeft />
        <span>Back</span>
      </button>
      <div className="flex pb-2 px-2 justify-between">
        <div className="flex flex-row items-center gap-2 justify-between md:justify-start">
          <label className="font-semibold">Employee Name:</label>
          <label>{name}</label>
        </div>
      </div>
      <div className="flex pb-2 px-2 justify-between">
        <div className="flex flex-row items-center gap-2 justify-between md:justify-start">
          <label htmlFor="quarterPicker" className="font-semibold">
            Select Quarter:
          </label>
          <select
            className="bg-default text-black rounded-md p-1 px-2 outline-none"
            onChange={(event) => {
              const selectedQuarter = event.target.value;
              setQuarter(selectedQuarter);
              sessionStorage.setItem("assessment_quarter", selectedQuarter);
            }}
            value={quarter}
          >
            <option value={0} disabled>
              Select Quarter
            </option>
            <option value={1}>First Quarter</option>
            <option value={2}>Mid Year</option>
            <option value={3}>Third Quarter</option>
            <option value={4}>Year End</option>
          </select>
        </div>
      </div>
      {checkForm === true ? (
        <div className="w-full bg-default px-2 pb-4 pt-2 rounded-md">
          <div className="font-semibold text-dark-gray rounded-md p-2 flex flex-col gap-2 items-center text-center">
            <span>
              Sorry, the employee have not yet created their main goals yet.
            </span>
          </div>
        </div>
      ) : (
        <>
          <form onSubmit={Submit}>
            <div className="w-full h-[36.8rem] bg-default px-2 pb-4 pt-2 rounded-md overflow-y-scroll">
              <div className="w-full pb-4">
                <span className="font-bold text-dark-gray">
                  Employee Grades:
                </span>
              </div>
              {pillars.map((pillar, pillarIndex) => (
                <React.Fragment
                  key={"pillar - " + pillar.eval_pillar_id + pCounter++}
                >
                  <div className="bg-white w-full rounded-md p-2 mb-4">
                    <div className="w-full">
                      <span className="text-black font-semibold">
                        {`${pillar.pillar_name} (${pillar.pillar_description}) - ${pillar.pillar_percentage}%`}
                      </span>
                    </div>
                    <div className="px-4">
                      <span>Objectives</span>
                    </div>
                    <div className="gap-2">
                      {currentObjective.filter((obj) => obj[0].obj_eval_pillar_id === pillar.eval_pillar_id).map(obj => {
                        return obj.map((o, i) => {
                          return <>
                          <button className={classNames(" px-4 py-2 rounded-t-md", o.status ? "bg-default-dark" : "bg-default hover:bg-default-dark")} onClick={() => handleTabChange(obj, o)}>
                            Objective {i + 1}
                          </button>
                          </>
                        })
                      })}
                      {/* {objectives.filter((obj) => obj.obj_eval_pillar_id === pillar.eval_pillar_id).map((objective, index) => {
                        return <button className={classNames(" px-4 py-2 rounded-t-md", index + 1 === 1 ? "bg-default-dark" : "bg-default")}>
                          Objective {index + 1}
                        </button>
                      })} */}
                    </div>
                    {/* {objectives.find(obj => obj.obj_objective_id == currentObjective.filter((obj) => obj[0].obj_eval_pillar_id === pillar.eval_pillar_id).find(pillar => pillar.find(objective => objective.status && objective.eval_pillar_id === pillar.eval_pillar_id)).map(objective => {return objective.obj_objective_id})).obj_objective} */}
                    <div className="flex gap-2 overflow-x-auto w-full">
                      {objectives
                        .filter(
                          (object) =>
                            object.obj_eval_pillar_id === pillar.eval_pillar_id
                        )
                        .map((object, objectIndex) => (
                          <div
                            key={
                              "objective - " +
                              object.obj_objective_id +
                              oCounter++
                            }
                            className="bg-default-dark flex-none bg-gray-200 p-2 rounded-[0_0.375rem_0.375rem_0.375rem] w-full">
                            <div className="pb-2">
                              <span className="whitespace-normal">
                                {object.obj_objective}
                              </span>
                            </div>
                            
                          </div>
                        ))}
                    </div>
                  </div>

                </React.Fragment>
              ))}
            </div>
            <AssessmentInstructions />
            <div className="w-full flex justify-end pt-4">
              <button
                className="w-full lg:w-fit cursor-pointer transition-all bg-un-blue text-white rounded p-1 px-2 hover:bg-un-blue-light disabled:bg-dark-gray disabled:cursor-not-allowed"
                type="submit"
              >
                Submit
              </button>
            </div>
          </form>
        </>
      )}
    </>